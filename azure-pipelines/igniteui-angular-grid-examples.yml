trigger:
  branches:
    include:
    - vnext
    - master

# This pipeline is meant to build specific branches for deployment. It's not meant to be a part of PR validation.
pr: none

parameters:
- name: isVerbose
  displayName: 'Get verbose output from steps - where configurable'
  type: boolean
  default: false
- name: shouldCleanPostExectuion
  displayName: 'Clean all pipeline dirs after the pipeline finishes?'
  type: boolean
  default: true

name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

stages:
- stage: Build
  pool:
    name: BuildAgentOnPrem
    demands: npm
  jobs:
  - job: BuildSamples
    steps:
      - checkout: 'self' 
        clean: true
        path: $(Build.Repository.Name)

      - task: NodeTool@0
        displayName: 'Install Node'
        inputs:
          versionSource: 'spec'
          versionSpec: '18.x'

      - task: Npm@1
        displayName: 'npm install --legacy-peer-deps'
        inputs:
          command: custom
          workingDir: '$(Build.SourcesDirectory)'
          customCommand: 'install --legacy-peer-deps'
          customEndpoint: 'internal proget'

      # - task: PowerShell@2
      #   displayName: 'Uninstall all IG trial packages & re-install their licensed variations'
      #   inputs:
      #     failOnStderr: true
      #     showWarnings: true
      #     workingDirectory: '$(Build.SourcesDirectory)'
      #     targetType: 'inline'
      #     script: |
      #       Get-Content -Path .\.npmrc
      #       $packageJson = Get-Content -Raw .\package.json | ConvertFrom-Json
      #       $npmUninstallPackages = "npm uninstall --save "
      #       $npmInstallPackages = "npm install --legacy-peer-deps "
      #       $packageJson.dependencies.PSObject.Properties | `
      #           Where-Object {
      #               $_.Name.StartsWith("igniteui-webcomponents-") -or $_.Name.StartsWith("igniteui-dockmanager") `
      #           } | `
      #           ForEach-Object { `
      #               $npmUninstallPackages += $_.Name + " "
      #               $npmInstallPackages += "@infragistics/" + $_.Name + "@" + $_.Value + " "
      #           }
      #       Write-Host $npmUninstallPackages
      #       Write-Host $npmInstallPackages
      #       Invoke-Expression -Command “$npmUninstallPackages”
      #       Invoke-Expression -Command “$npmInstallPackages”

      - task: Npm@1
        displayName: 'npm run build:ci'
        inputs:
          command: custom
          workingDir: '$(Build.SourcesDirectory)'
          customCommand: 'npm run build:ci'

      # - task: CopyFiles@2
      #   displayName: 'Copy web.config into the dist dir'
      #   inputs:
      #     SourceFolder: '$(Build.SourcesDirectory)/dist/grid-demos/browser'
      #     Contents: 'dist.grid-demos.browser'
      #     TargetFolder: '$(Build.SourcesDirectory)/dist/grid-demos/browser'

      - task: PublishPipelineArtifact@1
        displayName: 'Publish pipeline artifact'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)/dist/grid-demos/browser'
          artifact: 'dist.grid-demos.browser'
          publishLocation: 'pipeline'

      - ${{ if eq(parameters.shouldCleanPostExectuion, true) }}:
        - task: PostBuildCleanup@4